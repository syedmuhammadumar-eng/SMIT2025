

# anaylysis (storing account data, create account, update, delete , storing user amount)
# taking input from the user for account cration
print("HI john Deo please open my Account Please")

# <================= -Module 1:  F1 creating an account, ================>
def accountCreation():
    a1 = input("Enter user name")
    a2 = input("Enter user Father name")
    a3 = input("Enter user phone number")
    a4 = input("Enter user email")
    a5 = input("Enter user Job desingnation")
    a6 = input("Enter user Address city, area, street")
    return {
        "name": a1,
        "father_name": a2,
        "phone_number": a3,
        "email": a4,
        "job_designation": a5,
        "address": a6,
    }


#add unique user id into the user data 
#TO store all users into the array
User_Accounts = []

#bank
BankOfPakistan = {
    "Balance" : 0,
    "Transactions" : []
}

#use while loop for multiple entries
while True:

    AccountDetails = accountCreation()
    AccountDetails["Balance_Ledger"] = BankOfPakistan

    #ganerate unique user id
    userId = len(User_Accounts) + 1

    AccountDetails["UserID"] = f"User_{userId}"

    User_Accounts.append(AccountDetails)
    
    # ask if user want to add another acount or not
    another = input("do you want to add another account yes/no: ").strip().lower()
    if another != "yes":
        break
    
print(User_Accounts)


# <================= -Module 2:  F2 depositing money,bank =================>

#This function is used to deposit money in the that user account
def deposit(dict,amount):
    dict["Balance_Ledger"]["Balance"] += amount
    dict["Balance_Ledger"]["Transactions"].append(amount)
    

#This function is used to withdraw amount
def widraw(dict,amounts):
    dict["Balance_Ledger"]["Balance"] -= amounts
    dict["Balance_Ledger"]["Transactions"].append(amounts)




#This function is used to confirm the user first and deposit that users amount into that user account
def depositeAmount():
    while True:
        print("First verify you have current account or not: provide user name")
        userAccount = input("Enter UserName") #user put here your name


        #new loop here for checking this user is existing or not
        for c in User_Accounts:
            if "name" in c and c["name"] == userAccount:  #here we check does name key is in dict or if yes so that key match with user provided username
                print(f"Ok i got your Account is: {userAccount} ")
                
                print("do you want to widraw/depost if deposit so type : 1, if widraw so type : 2" )
                con = int(input("Enter 1/2"))
                if con == 1:
                    print("Now please tell me How Amount to Deposit")
                    cashAmount = int(input("Enter your amount"))
                    deposit(dict = c, amount = cashAmount)
                    break
                elif con ==2:
                    print("Now please tell me How Amount to widraw")
                    cashAmounts = int(input("Enter your amount"))
                    widraw(dict = c, amounts = cashAmounts)
                    break
                else:
                    print("You Select Invalid Option")

            else:
                print("User Not Found")
            # for key in c.keys():
            #     if "name" in key:
            #     # if key == "name":
            #         #here we get that name key values in namee
            #         namee = key["name"]
            #         if userAccount == namee:
            #             deposit()
            #         else:
            #             print("User not found.")
        print("do you want to add another amount")       
        smd = input("yes/No").upper()
        if smd == "yes".upper():
            continue
        elif smd == "No".upper():
            break
        else:
            print("Invalid 404, Try Again") 

        print(f"your total balance is: {dict["Balance_Ledger"]["Balance"]}")
        print(f"your Recent Transactions is: {dict["Balance_Ledger"]["Transactions"]} ")       
  

depositeAmount()




# user_Account carry all users
# Accountdetails carry only one user
# goal : add bank into individual user by means AccountDetails 